[["index.html", "Analysis of pro-level competitive matches in Counter-Strike Global Offensive Chapter 1 Introduction 1.1 Game Description 1.2 How can the data bring answers to the following questions?", " Analysis of pro-level competitive matches in Counter-Strike Global Offensive Anh-Vu Nguyen, Malaika Gupta, Wael Boukhobza 2021-12-13 Chapter 1 Introduction Counter-Strike Global Offensive or CSGO is a team-based video game that is among the most popular ones in the e-sport scene. With growing organizations and sponsors backing the players, the top teams have their own game analyst whose task is to study the opponents and come up with the best in-game strategies. Data generated from thousands of matches can help viewers understand the game, and shape how future teams are going to play strategically. 1.1 Game Description CSGO is a first-person shooter video game where two teams of 5 players compete to achieve a variety of objectives. These two teams play as both the Terrorist (T) and Counter- Terrorist (CT) sides over the course of a professional match. On each map, teams are initially assigned to the T or CT side and then play for 15 rounds as their assigned side. Teams switch sides after the 15th round. The first team to win 16 rounds wins the match. A professional match consists of a collection of performances on one or more maps, where maps are standardized and selected from a known pool of seven maps. Players must purchase armor, weapons, defuse or rescue kits, and manage their in-game economy to maximize their chance of success. The overall aim of the game is to eliminate the other team whilst successfully completing side objectives. Terrorist Objectives: plant bombs, take hostages, and assassinate opponents. Counter-Terrorists Objectives: defuse bombs, rescue hostages, and assassinate opponents. 1.2 How can the data bring answers to the following questions? How can we rate a players or teams performance? Data can help understand the performance of players and teams by calculating some metrics. Those metrics can be combined to create a global rating. How can in-game-generated data help teams gain a competitive advantage? Game analysts and players traditionally only watch the demo replays to study teams and player behaviors. Data can help automate this process by showing some players habits. Can we say that the game is balanced after more than 10 years of continuous updates? Developers have tried to change weapon behaviors, game economy, maps, and player movements to make the game more balanced. Despite numerous updates since its release 10 years ago, players constantly give their feedback to make it evolve. Having a look at win rates in different situations throughout the years can help understand the updates, and shed light on potential fixes that can be made. "],["data-sources.html", "Chapter 2 Data sources 2.1 What match to analyse? 2.2 Getting the demo files", " Chapter 2 Data sources We are going to work with files generated by the game itself. They are called demo files and were created by developers to replay matches from any point of view. 2.1 What match to analyse? There are thousands of pro-level matches but only the top teams are able to play in tournaments that are called Majors. We chose to analyse Major tournaments as the strategies and team plays of the top 20 teams are the most copied by other players. Additionally the consistent level of performance of higher level teams, and the controlled environment that offline tournaments allow means that is will be easier to get meaningful data as it is less likely that teams will be influenced by external factors (internet connection, different time-zone and schedule) . 2.2 Getting the demo files Each match is recorded in a demo file generated by the game. A demo file contains all the raw data of a match, and is intended to be read by the game to replay the match. Demo files of Majors can be downloaded from the game, or from the HLTV website. We used HLTV to download them as it can conveniently be parsed. HLTV is a site that compiles all pro-level matches. It collaborates with event organizers to display real-time statistics and scores, and also shares recorded demo files. The code we used to automatically parse the html pages is included in the github repository. The downloaded demo files resulted in a total of 82.1GB of data, and as such has not been uploaded. "],["data-transformation.html", "Chapter 3 Data transformation 3.1 Getting readable data 3.2 Kills data 3.3 Damages data 3.4 Flashes data 3.5 grenades data 3.6 Common data", " Chapter 3 Data transformation 3.1 Getting readable data We used Selenium and Beautiful Soup to parse the HLTV website and to download the demo files. To avoid putting too much load on the site, we downloaded the demo files over the course of a full week. This resulted in over 600 demo files. Python notebook - parser and demo downloader To generate readable data from the demo files, we used a python library [1] to parse them in JSON files, resulting in 625 successful conversions and 20GB of pre-processed data from the original 80+GB of data. Python notebook - pre-processing. This process concerts the demo files into json files. The pre-processed data is still very much dirty as some files were corrupted. Also, in-game technical pauses, warmup rounds, game restarts, etc, can mess up the format and add rounds. We still managed to clean the data with the csgo python library cleaning functions. The following Python notebook explains the data structure of a generated JSON file: Python notebook - data structures To narrow down the amount of data points, we chose to merge all the matches json files into 5 json files containing information that we judged relevant for analysis : kills data, damages data, flashed data,and grenades data. To do so, we had to iterate through all the json files and all the relevant keys that we wanted to analyze. To combine the json files and join the matches information such as score, winner, and teams, we used the parsed html from HLTV to cross the information. Python notebook - combining json files. The last step allows having consistent data across all matches and events that can later be joined, or grouped together in R. Lion drive link to the combined json files and parsed html (1.5GB) 3.2 Kills data The kills data stored in the ALL_kills.json file contains information on every kill that happened such as the player positions, weapon used etc. It has 103,261 rows and 59 columns. The various column names in the kills data set are: ## [1] &quot;tick&quot; &quot;seconds&quot; &quot;clockTime&quot; ## [4] &quot;attackerSteamID&quot; &quot;attackerName&quot; &quot;attackerTeam&quot; ## [7] &quot;attackerSide&quot; &quot;attackerX&quot; &quot;attackerY&quot; ## [10] &quot;attackerZ&quot; &quot;attackerAreaID&quot; &quot;attackerAreaName&quot; ## [13] &quot;attackerViewX&quot; &quot;attackerViewY&quot; &quot;victimSteamID&quot; ## [16] &quot;victimName&quot; &quot;victimTeam&quot; &quot;victimSide&quot; ## [19] &quot;victimX&quot; &quot;victimY&quot; &quot;victimZ&quot; ## [22] &quot;victimAreaID&quot; &quot;victimAreaName&quot; &quot;victimViewX&quot; ## [25] &quot;victimViewY&quot; &quot;assisterSteamID&quot; &quot;assisterName&quot; ## [28] &quot;assisterTeam&quot; &quot;assisterSide&quot; &quot;isSuicide&quot; ## [31] &quot;isTeamkill&quot; &quot;isWallbang&quot; &quot;penetratedObjects&quot; ## [34] &quot;isFirstKill&quot; &quot;isHeadshot&quot; &quot;victimBlinded&quot; ## [37] &quot;attackerBlinded&quot; &quot;flashThrowerSteamID&quot; &quot;flashThrowerName&quot; ## [40] &quot;flashThrowerTeam&quot; &quot;flashThrowerSide&quot; &quot;noScope&quot; ## [43] &quot;thruSmoke&quot; &quot;distance&quot; &quot;isTrade&quot; ## [46] &quot;playerTradedName&quot; &quot;playerTradedTeam&quot; &quot;playerTradedSteamID&quot; ## [49] &quot;weapon&quot; &quot;round_won_by&quot; &quot;match_id&quot; ## [52] &quot;map_name&quot; &quot;round_num&quot; &quot;round_tot&quot; ## [55] &quot;match_num&quot; &quot;match_event&quot; &quot;match_date&quot; ## [58] &quot;match_team1&quot; &quot;match_team2&quot; 3.3 Damages data The damages data stored in the ALL_damages.json file contains information on every damage dealt such as the player positions, weapon used, damage dealt etc. It has 337,151 rows and 42 columns. The various columns in the damages data set are: ## [1] &quot;tick&quot; &quot;seconds&quot; &quot;clockTime&quot; &quot;attackerSteamID&quot; ## [5] &quot;attackerName&quot; &quot;attackerTeam&quot; &quot;attackerSide&quot; &quot;attackerX&quot; ## [9] &quot;attackerY&quot; &quot;attackerZ&quot; &quot;attackerAreaID&quot; &quot;attackerAreaName&quot; ## [13] &quot;attackerViewX&quot; &quot;attackerViewY&quot; &quot;attackerStrafe&quot; &quot;victimSteamID&quot; ## [17] &quot;victimName&quot; &quot;victimTeam&quot; &quot;victimSide&quot; &quot;victimX&quot; ## [21] &quot;victimY&quot; &quot;victimZ&quot; &quot;victimAreaID&quot; &quot;victimAreaName&quot; ## [25] &quot;victimViewX&quot; &quot;victimViewY&quot; &quot;weapon&quot; &quot;hpDamage&quot; ## [29] &quot;hpDamageTaken&quot; &quot;armorDamage&quot; &quot;armorDamageTaken&quot; &quot;hitGroup&quot; ## [33] &quot;round_won_by&quot; &quot;match_id&quot; &quot;map_name&quot; &quot;round_num&quot; ## [37] &quot;round_tot&quot; &quot;match_num&quot; &quot;match_event&quot; &quot;match_date&quot; ## [41] &quot;match_team1&quot; &quot;match_team2&quot; 3.4 Flashes data The flashes data stored in the ALL_flashes.json file contains information on every flash grenade thrown. It has 232,181 rows and 36 columns. The various column names in the flashes data set are: ## [1] &quot;tick&quot; &quot;seconds&quot; &quot;clockTime&quot; &quot;attackerSteamID&quot; ## [5] &quot;attackerName&quot; &quot;attackerTeam&quot; &quot;attackerSide&quot; &quot;attackerX&quot; ## [9] &quot;attackerY&quot; &quot;attackerZ&quot; &quot;attackerAreaID&quot; &quot;attackerAreaName&quot; ## [13] &quot;attackerViewX&quot; &quot;attackerViewY&quot; &quot;playerSteamID&quot; &quot;playerName&quot; ## [17] &quot;playerTeam&quot; &quot;playerSide&quot; &quot;playerX&quot; &quot;playerY&quot; ## [21] &quot;playerZ&quot; &quot;playerAreaID&quot; &quot;playerAreaName&quot; &quot;playerViewX&quot; ## [25] &quot;playerViewY&quot; &quot;flashDuration&quot; &quot;round_won_by&quot; &quot;match_id&quot; ## [29] &quot;map_name&quot; &quot;round_num&quot; &quot;round_tot&quot; &quot;match_num&quot; ## [33] &quot;match_event&quot; &quot;match_date&quot; &quot;match_team1&quot; &quot;match_team2&quot; 3.5 grenades data The grenades data stored in the ALL_grenades.json file contains information on every grenades thrown that is not a flash grenade. It has 298,613 rows and 30 columns. The various column names in the grenades data set are: ## [1] &quot;throwTick&quot; &quot;destroyTick&quot; &quot;throwSeconds&quot; &quot;destroySeconds&quot; ## [5] &quot;throwerSteamID&quot; &quot;throwerName&quot; &quot;throwerTeam&quot; &quot;throwerSide&quot; ## [9] &quot;throwerX&quot; &quot;throwerY&quot; &quot;throwerZ&quot; &quot;throwerAreaID&quot; ## [13] &quot;throwerAreaName&quot; &quot;grenadeType&quot; &quot;grenadeX&quot; &quot;grenadeY&quot; ## [17] &quot;grenadeZ&quot; &quot;grenadeAreaID&quot; &quot;grenadeAreaName&quot; &quot;UniqueID&quot; ## [21] &quot;round_won_by&quot; &quot;match_id&quot; &quot;map_name&quot; &quot;round_num&quot; ## [25] &quot;round_tot&quot; &quot;match_num&quot; &quot;match_event&quot; &quot;match_date&quot; ## [29] &quot;match_team1&quot; &quot;match_team2&quot; 3.6 Common data All the previous json data have the same information on the matches (match id, event, date) and teams (team1, team2, winner). [1] Analyzing Counter-Strike: Global Offensive Data, Peter Xenopoulos, (2021), GitHub repository, https://github.com/pnxenopoulos/csgo "],["missing-values.html", "Chapter 4 Missing values 4.1 Kills data 4.2 Damages data", " Chapter 4 Missing values Well have a look at the missing data. For this analysis, be chose a subset of 30 random matches for a reasonable processing time. Of all the matches data, only the kills and damages data frames contained missing data. 4.1 Kills data The kills data frame contains information about each confirmed kill by any of the 10 players of both teams. (Variables beginning with flash) Flash grenades are thrown to temporarily blind the enemy players. The missing data is expected: when a player is killed, it has not necessarily been flashed by a flash grenade before (patterns 1,2,3,5 in the graph below). We can see that the vast majority of kills are done without the victim being flashed. Less than 10 percent of the kills are done with the help of flash grenades (patterns 4,6 in the graph below). (Variables beginning with assist) Similarly, less than 15 percent of kills are helped with assists (patterns 2,5 in the graph below). An assist occurs when a teammate deals more than 40 points of damage to a player before that player is killed. The teammate then gets the assist for dealing damages, thus helping the kill. (Variables beginning with playerTraded) A player is traded when one of his teammates gets immediate revenge on the enemy player who got the initial kill (patterns 3,5,6 in the graph below). Again, about 15 percent of the kills are traded. A trade is important because it ensures that the other team does not get the numerical advantage. Surprisingly, there are no complete cases the 30 sampled matches i.e there are no kills with all three previous points at the same time 4.2 Damages data The damages data frame contains information about each damage a player receives. A damage results in less health points. Most damages (98 percent) are inflicted by a player (bullet or grenade damages). But about 2 percent of damages are not dealt by a player. Those are caused by the game environment: falling damage or bomb damage (no player is linked to a planted bomb). Pattern 2 shows the affected variables "],["results.html", "Chapter 5 Results 5.1 Evaluate the performance of teams and players with a new rating 5.2 Teams performance 5.3 Players performance 5.4 Use in-game data to have the competitive advantage 5.5 Game evolution and balance", " Chapter 5 Results 5.1 Evaluate the performance of teams and players with a new rating We are going to see how commonly used indicators impact the final score. We generated standard indicators used by event organisers and sites from the datasets: kpr : average number of kills per round adr: average damage per round first_kill_ratio: ratio of the time where the team or player gets the first kill (which grants a numerical advantage) smokes_per_round: average number of smokes thrown in a round assist_ratio: ratio of kills assisted by another player that dealt more than 40 points of damage non_traded_ratio: ratio of kills where the victim team could not get a revenge to prevent a numerical advantage avg_flash_duration: average time of blinded enemy players caused by flash grenades blinded_ratio: ratio of kills where the victim was blinded by a flash grenade strafing: ratio of kills where the attacker was strafing i.e. was sidestepping to avoid being immobile to the opposing player hs_ratio: ratio of kills where the attacker landed a shot in the enemys head, resulting in more damage points We can see that some indicators are more correlated than others to the relative score difference (difference of the winners and losers scores over the sum of the scores). For instance, the kpr indicator has a correlation score of 0.6 with the relative score difference and thus can be used to evaluate a players performance. On the contrary, the strafing and hs_ratio indicators have little to do with a teams success. Overall we can see that kpr (ie:average number of kills per round), adr (ie: average damage per round) and first_kill_ratio are three indicator variables that have a stronger positive correlation with the relative score difference A PCA analysis better helps visualize indicators that better reflect a teams chance of winning. Indicators with directions opposite to the loosing matches and closer to the correlation circle are the most interesting ones. As we can see, the PCA analysis confirms the findings with the correlation tests. It also tells us that many of these indicators are themselves correlated since the angle between their arrows is very small: the principal components were not able to separate these features in the reduced space. It is not surprising that the number of kills, the number of damages and the number of assists are very correlated. Nonetheless, it is interesting to notice that the number of first kills of a team is also correlated to these metrics; an early numeric advantage in the match thus definitely give an advantage to a team. Note that there is no indicator with a strong correlation (more than 0.7) with the score difference. But combining those indicators can still lead to a better overall rating score. We are going to achieve it with a multi-variable linear regression. ## (Intercept) kpr adr ## -2.159001804 1.098123208 -0.008680566 ## first_kill_ratio grenades_per_round attack_grenades_round ## 0.556314728 0.129022010 -0.097033872 ## smokes_per_round assist_ratio non_traded_ratio ## NA -0.013587043 0.908901056 ## avg_flash_duration ## 0.012487306 5.2 Teams performance With a new combined rating, we can take a closer look at each teams performance relative to each other ## # A tibble: 160 x 3 ## # Groups: team [47] ## team event rating ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Astralis ELEAGUE Major 2017 69.2 ## 2 Astralis ELEAGUE Major 2018 25 ## 3 Astralis ESL One Cologne 2016 42.9 ## 4 Astralis FACEIT Major 2018 90 ## 5 Astralis IEM Katowice 2019 88.9 ## 6 Astralis MLG Columbus 2016 83.3 ## 7 Astralis PGL Major Krakow 2017 NaN ## 8 Astralis StarLadder Major Berlin 2019 76.9 ## 9 Avangar IEM Katowice 2019 0 ## 10 Avangar StarLadder Major Berlin 2019 61.5 ## # ... with 150 more rows As expected the winning team is consistently in the top team ratings. 6 times out of 10, the winning team has the best rating between 70 and 100. However, sometimes, some teams get even better ratings than the winner. This is explained by the fact that some teams have a solid performance throughout the tournament, only to get eliminated in the final stage. For example, in the Eleague Major 2017 event, Virtus.Pro was eliminated by Astralis in the finals, and Faze Clan got eliminated in the quarter-finals. [1] 5.3 Players performance Events and websites like HLTV generally focus on players performance at individual events. However, it would be interesting to look at a players performance across all events. This would smooth out players that had an unexpectedly good or bad performance in an event. The rating is derived from the combined effort of the player considering various parameters like average kills per round, damages through grenade, headshot, ratio of first kills, duration of flashes etc. The player Autimatic has the highest rating of all and has one win with his team Cloud9 in the Boston Major. Interestingly, Zywoo, s1mple, and device are the immediate 3 highest rated players after autimatic. The fact that those three players where nominated in the top 3 players in 2018 and 2019 by the HLTV website means that our combined rating reflects the different ratings of other sites such as HLTV. Note that the player Zywoo started his career in 2018, and thus is not in the top player ranking of this year. [2], [3], [4] There is almost 20 points of rating score difference between the top-rated player and the 30th best-rated player. The same can the said for the worst-rated players. As a result, it is quite easy to differentiate players as the ratings are not too close to each other. It is often hard to compare teams and players across events because players often change teams. One way to cross the information is to visualize the teams of a player: This shows how players changed teams throughout various events and how few players remained in the same team for multiple events. For instance, players Flamie and Edward remained in the team Natus Vincere for multiple events. One of the most successful teams is Astralis with 3 Major wins. A core of 3 players (dupreeh, device, and Xyp9x) have been playing together for 10 events explaining the teams consistent success. 5.4 Use in-game data to have the competitive advantage The game data of matches is available to everyone and pro teams always watch their opponents previous games to come up with strategies. However, watching games takes time and some parts of this process can be automated. Even though it does not give information such as a teams reactions to specific events, 2d-density maps can give the general trends, and habits of a team or player. For instance, one of the hardest players to play against is s1mple, especially with the AWP weapon because of its range. Parsing the game data allows to know where players can expect s1mple to be and where he can be aiming at with his weapon. Knowing the habits of a player and the positions where it is dangerous to be can avoid being surprised by the enemy and helps to come up with strategies to counter the enemy team. We can see in yellow where s1mple tends to be when he deals damage, and where the victims positions are. The trajectories allow linking those two positions. We can see that s1mple often takes tight lines where the trajectory is tangent to a corner of a wall. 5.5 Game evolution and balance People often attribute the success and longevity of the CSGO game to its balance, meaning that both teams have an equal chance of winning. However, this is difficult to achieve as it depends on multiple factors such as the weapon characteristics and map layout. Because the developers have been continuously updating the maps and weapon characteristics, the probability to win a round on the T/CT sides has changed over the years. The drop in the win percentage differences after 2016 can be attributed to the update of the nuke, inferno, and overpass maps. Maps updates often include changes in the layout to give more advantage to a given side. In CS:GO tournaments, teams can play on a range of different map layouts. Professional teams often spend hours training on these maps, so it is interesting to see win-rate across different maps. Nuke has been removed from the official maps after Katowice 2015 and reintroduced for Cologne 2016. [5] It was known to greatly favor the CT side, often forcing the team starting on the T side to have an impressive comeback after switching sides on the halftime. Of all maps, nuke had the worst balance especially during Dreamhack Winter 2014 with a CT win rate of 80%. But after the nuke map update, the balance greatly improved and the CT and T win rates were contained between 40% and 60%. In fact, in 2019 all maps were balanced with win rates between 40% and 60%, with de_inferno, de_dust2, de_nuke, and de_mirage being particularly balanced (win rates close to 50%). Overall, the Starladder Berlin Major 2019 event seems the most balanced Major ever. It is safe to say that game updates generally improved the balance of the game. Note that the map pool changes for every event. The latest map being introduced is vertigo. Because it is a new map, it is not as balanced as the other ones. Weapons also impact the game balance. When the developers change a weapons characteristics such as damage output, it can lead to a drop or spike in popularity. For example, in 2017 developers tried to increase the usage of smg type weapons by increasing their damage output, especially for the ump. As a result, the ump was often used by teams when they could not get a rifle. But complaints from pro players meant that the update was reverted. [6] The same can be said for the cz-75 in 2018. Also, the p250, five-seven, and tec-9 had their damage and accuracy decreased over the years and resulted in a drop in usages by the pro players. Finally, it happens that players discover that a weapon can be very effective, even without its characteristics being changed. This is what happened in 2019 when players started to use the AUG and the SG 553 weapons for their good accuracy at long range. As a result, their effectiveness has been reduced in a later update. [7] [1] Eleague Major 2017, Overview page, HLTV.ORG [2] OFFICIAL: VITALITY UNVEIL TEAM, MIRAA, 2018HLTV.ORG [3] Top 20 players of 2019: INTRODUCTION, Striker, 2019 HLTV.ORG [4] Top 20 players of 2018: INTRODUCTION, Professeur, 2018 HLTV.ORG [5] NEW UPDATE ADDS NUKE TO ACTIVE DUTY, stich, 2016, HLTV.ORG [6] NEW UPDATE CHANGES THE UMP45, Sander, 2017, HLTV.ORG [7] Release Notes for 4/10/2020, Valve, 2020, update notes "],["interactive-component.html", "Chapter 6 Interactive component 6.1 Explanation 6.2 Interactive maps", " Chapter 6 Interactive component 6.1 Explanation The interactive component allows the user to study the positions of a team on a specific map. Positions are split in CT and T positions as both sides face each other. To generate each map .csv data, we grouped the damages data by match id in the Generate_csv.Rmd file. The .csv files are stored in the docs/D3/csv folders of the GitHub repository and are arranged by events, teams and maps. Hovering over points shows attacker, victim and weapon information. 6.2 Interactive maps Click to see the interactive component in full size .btn_D3 { background-color: white; color: black; border: 2px solid #008CBA; border-radius: 5px; padding: 5px 8px; box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2), 0 6px 20px 0 rgba(0,0,0,0.19); } .btn_D3:hover { background-color: #008CBA; box-shadow: 0 12px 16px 0 rgba(0,0,0,0.24), 0 17px 50px 0 rgba(0,0,0,0.19); color: white; } .row { width: 100%; display: flex; flex-direction: row; justify-content: center; } .block { display: block; margin-left: auto; margin-right: auto; } h4, h2{ text-align: center; } .buttonrow{ width: 60%; } /* The switch - the box around the slider */ .switch { position: relative; display: inline-block; width: 60px; height: 34px; } /* Hide default HTML checkbox */ .switch input { opacity: 0; width: 0; height: 0; } /* The slider */ .slider { position: absolute; cursor: pointer; top: 0; left: 0; right: 0; bottom: 0; background-color: #ccc; -webkit-transition: .4s; transition: .4s; } .slider:before { position: absolute; content: \"\"; height: 26px; width: 26px; left: 4px; bottom: 4px; background-color: white; -webkit-transition: .4s; transition: .4s; } input:checked + .slider { background-color: #2196F3; } input:focus + .slider { box-shadow: 0 0 1px #2196F3; } input:checked + .slider:before { -webkit-transform: translateX(26px); -ms-transform: translateX(26px); transform: translateX(26px); } /* Rounded sliders */ .slider.round { border-radius: 34px; } .slider.round:before { border-radius: 50%; } .svg-container { display: inline-block; display: block; margin-left: auto; margin-right: auto; position: relative; width: 100%; padding-bottom: 100%; /* aspect ratio */ vertical-align: top; overflow: hidden; } .svg-content-responsive { display: inline-block; position: absolute; top: 10px; left: 0; } svg .rect { fill: gold; stroke: steelblue; stroke-width: 5px; } div.tooltip-donut { position: absolute; text-align: center; padding: .5rem; background: #FFFFFF; color: #313639; border: 1px solid #313639; border-radius: 8px; pointer-events: none; font-size: 1.3rem; } Event, team and map selection 2d-density of attacker position Show attacker positions Show victim positions Show trajectories Change team side data Showing CT side Hovering over points shows attacker, victim and weapon information. Credits: 2d-density maps with D3 link "],["conclusion.html", "Chapter 7 Conclusion", " Chapter 7 Conclusion The massive amount of data at our disposal means that we had to severely restrain the subset of information used for analysis. We only used 1.3% of the data (1GB/80GB). Considering the reduced amount of data used we still managed to get interesting information from the 400+ matches. With data covering 5 years from 2015 to 2019, we managed to generate a global rating to measure the performance of teams and players (5.1-5.3). The game data was also used to get insights into the teams play styles and habits (5.4 and 6). We also showed the games balance evolution throughout the years (5.5). That being said, there is still a lot to analyze with the rest of the data that was unused. For example, we did not cover the economic aspect of the game: different weapon buying decisions from the players can impact the rest of the game. Sill, the D3 interactive part (chapter 6) allowed us to show more than regular static graphs would allow. Also while we had a look at players positions in a match, a more precise round-by-round analysis can get more information on specific team strategies. However, this would have necessitated players position at frequent intervals which would increase the data size by a considerable margin. With e-sport organizations becoming more professional with dedicated game analysts working for the players, there have been several tools [1],[2],[3] that have been created to better analyze and visualize game data. It would also be interesting to have a look at casual players data to see how they differ from pro players. The fact that game developers already use machine learning to detect online cheaters in game means that there is still a lot to be explored. Overall, exploring the topic of game data analysis was very interesting and we learned a lot about R graphs creation and interactive graphs with D3. [1] leetify [2] scope.gg [3] noesis.gg "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
